void LCS(string &x,string &y,int n,int m,vector<vector<int>> &tab)
        {
            //Initialization
            for(int i=0;i<n+1;i++)
            {
                for(int j=0;j<m+1;j++)
                {
                    if(i==0||j==0){
                        tab[i][j] = 0;
                    }
                }
            }

            //Code part
            for(int i=1;i<n+1;i++)
            {
                for(int j=1;j<m+1;j++)
                {
                    if(x[i-1]==y[j-1]){
                        tab[i][j] = 1+tab[i-1][j-1];
                    }else{
                        tab[i][j] = max(tab[i][j-1],tab[i-1][j]);
                    }
                }
            }

            return;
        }


        string shortestCommonSupersequence(string x, string y) {
            
            int n = x.length();
            int m = y.length();
            
            vector<vector<int>> tab(n+1,vector<int>(m+1,-1));

            LCS(x,y,n,m,tab);

            int i=n;
            int j=m;

            string scs = "";

            while(i>0 && j>0)
            {
                if(x[i-1]==y[j-1])
                {
                    scs.push_back(x[i-1]);
                    i--;
                    j--;
                }else{
                    if(tab[i-1][j]>tab[i][j-1])
                    {
                        scs.push_back(x[i-1]);
                        i--;
                    }else{
                        scs.push_back(y[j-1]);
                        j--;
                    }
                }
            }

            while(i>0){
                scs.push_back(x[i-1]);
                i--;
            }

            while(j>0){
                scs.push_back(y[j-1]);
                j--;
            }

            reverse(scs.begin(),scs.end());

            return scs;
        }

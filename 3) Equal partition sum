        bool isSubsetSum(int N, int arr[], int sum){
        // code here
        
        //space or stoarge
        vector<vector<bool>> tab(N+1,vector<bool>(sum+1,-1));
        
        //Initialization
        for(int i=0;i<N+1;i++)
        {
            for(int j=0;j<sum+1;j++)
            {
                if(i==0){
                    tab[i][j] = false;
                }
                
                if(j==0){
                    tab[i][j] = true;
                }
            }
        }
        
        
        //Choice diagram code part
        
        for(int i=1;i<N+1;i++)
        {
            for(int j=1;j<sum+1;j++)
            {
                if(arr[i-1]<=j) {
                    tab[i][j] = tab[i-1][j-arr[i-1]] || tab[i-1][j];
                }else if(arr[i-1]>j){
                    tab[i][j] = tab[i-1][j];
                }
            }
        }
        
        return tab[N][sum];
    }
    
    
    int sumOfArray(int arr[],int n)
    {
        //Base case
        if(n==0){
            return 0;
        }
        
        int lastElement = arr[n-1];
        
        int subArraySum = sumOfArray(arr,n-1);
        
        return subArraySum + lastElement;
    }
    
    
    
    int equalPartition(int N, int arr[])
    {
        // code here
        
        int sum = sumOfArray(arr,N);
        
        if(sum%2!=0){
            return 0;
        }
        
        if(isSubsetSum(N,arr,sum/2)){
            return 1;
        }
        
        return 0;
    }
